--Todo
--Avoid adding code here lool
--more code here, the more the  time wasted lol
--speaking of, cc.expect and lua's assert are basically the
--same as the error checkers i made.
--i dont know if i will give those up though...

--Random functions that are functionally useless,
--but i think someone might like for some reason :P


--Input Error (Handler).
--Replaced by errcheck.
function inErr(user,check)
    local str=type(user)
    if str==check then
        return true
    end
    --massive input err checker
    --could probably be simplified but would lose unique reactions.
    if str=="string" then
        printError("Expected "..check..", got string")
    elseif str=="nil" then
        printError("Expected "..check..", got nil")
    elseif str=="bool" then
        printError("Expected "..check..", got bool")
    elseif str=="number" then
        printError("Expected "..check..", got number")
    elseif str=="table" then
        printError("Expected "..check..", got table")
    elseif str=="function" then
        printError("Expected "..check..", got function")
    elseif str=="thread" then
        printError("Expected "..check..", got thread")
    elseif str=="userdata" then
        printError("How in the world have you done this? Var was of type userdata, which should be impossible in CraftOS")
        printError("Expected "..check..", got userdata??")
    else
        printError("Something broke with the 'inErr' function.")
        printError("Expected "..check..", got "..str)
    end
    return false
end


--LOLLL look at this code:

function errcheck(value, default, type, conform)
    --value = var to be checked
    
    
    if type(value) ~= type and default == nil then
        error("Expected "..type..", got "..value, 1)

end
--ignore the missing 'end' im trying to use the function type as a variable...
--bai bai type() checks XD


--[[
require("dwarfAPI")

turtleForward = turtle.forward
turtleTurnLeft = turtle.turnLeft
turtleTurnRight = turtle.turnRight
turtleUp = turtle.up
turtleDown = turtle.down

function turtleTurnAround()
    turtleTurnRight()
    turtleTurnRight()
end
--]]




checkForBounds old thingy
--[[
if method == "totalLength" then
    local axis = settings.get("sys.storage.detection.axis")
    local currPos = getLocation(axis)
    local start = settings.get("sys.storage.detection.startPos")
    local length = settings.get("sys.storage.detection.totalLength")

    
    --print("axis: "..axis)
    --print("currPos: "..currPos)
    --print("start: "..start)
    --print("length: "..length)
    --sleep(2)

    --ahh..... how nice.
    --This doesnt work because the gps inside moveAPI doesnt work
    --Well atleast it makes sense. and will probably be easier to
    --fix... i hope. we will see later.
    

    if currPos == start and move =="back" or currPos == length and move == "forward" then
        --if trying to go out of bounds...
        --if not obvious, start must ALLWAYS be lower than length    
        return false
        
    elseif currPos < start or currPos > length then
        print("currPos: "..currPos.." || start: "..start.." || length: "..length)
        print("Warning. Out of bounds.")
        print("Currently turtle cannot fix itself, please help")
        error("Please place turtle back at the start location")
        return false
    else
        if turtle[move]() then
            --i think?
            step = step - 1
        else
            --stop trying to move??
            return false 
        end
    end]]

function ui.define.button(startPos, text, near, action, key)
    

    --button
    term.clear()
    term.setCursorPos(1,1)

    local id = near.id
    if not allButtons[id] then
        allButtons[id] = {id = near.id}
        allButtons[id].text = text
        allButtons[id].pos = startPos
        allButtons[id].near = near
        if type(action) == "function" then
            allButtons[id].action = action
        elseif action == nil then
            action = function()
                        print("Button not setup")
                    end
            --[[
            ui.define.text(startPos,id,text)
            allButtons[id] = nil
            return endPos,id, "text"
            vprint("No valid function defined for button "..id)
            vprint("Probably fine in a dev environment.")
            vprint("Garrenteed bug if it is not, open an issue if so.")

            vprint("...also you've no idea how much time i made myself waste")
            vprint("by redefining non-function buttons to text...")
        else
            print(type(action))
            error("Action must be a single function or nil")
            do something like...
            function(); return function(with, args); end
        ]]
        end

        local endPos = startPos[1] + #text
        return endPos, id
    else
        vprint("Attempted to redefine button "..id)
        return 0, "false"
    end
    --else if key do function on that key press?

end



--[[
--Makes neat pattern?    
elseif side == "quarry" then
    dist = 50
    lengthSet = 4

    term.clear()
    term.setCursorPos(1,1)
    term.write("depth: "..1)
    term.setCursorPos(1,2)
    term.write("row: "..1)
    term.setCursorPos(1,3)
    term.write("column: "..1)

    for depth = 1, dist do -- dist
        for row = 1, 1+lengthSet do -- row
            for column = 1, lengthSet do -- column
            --SIMPLE VERS, NEEDS UPDATE TO USE GPS
                turtle.dig()
                turtle.forward()

                term.setCursorPos(1, 3) --var tracker
                term.clearLine()
                term.write("column: "..column)
            end

            if doTurn == turtle.turnLeft or doTurn == nil then
                doTurn = turtle.turnRight
            else; doTurn = turtle.turnLeft; end
            
            if row ~= lengthSet+1 then
                doTurn()
                turtle.dig()
                turtle.forward()
                doTurn()
            end

            term.setCursorPos(1, 2) --var tracker
            term.clearLine()
            term.write("row: "..row)
]]