--Todo
--Avoid adding code here lool
--more code here, the more the  time wasted lol
--speaking of, cc.expect and lua's assert are basically the
--same as the error checkers i made.
--i dont know if i will give those up though...

--Random functions that are functionally useless,
--but i think someone might like for some reason :P


--Input Error (Handler).
--Replaced by errcheck.
function inErr(user,check)
    local str=type(user)
    if str==check then
        return true
    end
    --massive input err checker
    --could probably be simplified but would lose unique reactions.
    if str=="string" then
        printError("Expected "..check..", got string")
    elseif str=="nil" then
        printError("Expected "..check..", got nil")
    elseif str=="bool" then
        printError("Expected "..check..", got bool")
    elseif str=="number" then
        printError("Expected "..check..", got number")
    elseif str=="table" then
        printError("Expected "..check..", got table")
    elseif str=="function" then
        printError("Expected "..check..", got function")
    elseif str=="thread" then
        printError("Expected "..check..", got thread")
    elseif str=="userdata" then
        printError("How in the world have you done this? Var was of type userdata, which should be impossible in CraftOS")
        printError("Expected "..check..", got userdata??")
    else
        printError("Something broke with the 'inErr' function.")
        printError("Expected "..check..", got "..str)
    end
    return false
end


--LOLLL look at this code:

function errcheck(value, default, type, conform)
    --value = var to be checked
    
    
    if type(value) ~= type and default == nil then
        error("Expected "..type..", got "..value, 1)

end
--ignore the missing 'end' im trying to use the function type as a variable...
--bai bai type() checks XD


--[[
require("dwarfAPI")

turtleForward = turtle.forward
turtleTurnLeft = turtle.turnLeft
turtleTurnRight = turtle.turnRight
turtleUp = turtle.up
turtleDown = turtle.down

function turtleTurnAround()
    turtleTurnRight()
    turtleTurnRight()
end
--]]

function move(side,dist,digBool)
    --dist = whole positive number
    --side = string, side.
    
    --Compatibility with 
    --turtleForward()
    if num == nil then
        num = 1
    end

    local turtleMove = turtle.forward
    local turtleDig = turtle.dig
    if side ~= nil and side ~= "forward" or side ~= "f" then

        if string.lower(side) == "left" or string.lower(side) == "l" then
            turtle.turnLeft()
        elseif string.lower(side) == "right" or string.lower(side) == "r" then
            turtle.turnRight()
        elseif string.lower(side) == "back" or string.lower(side) == "b" then
            turtle.turnRight(); turtleRight()
        elseif string.lower(side) == "up" or string.lower(side) == "u" then
            turtleMove = turtle.up
            turtleDig = turtle.digUp
        elseif string.lower(side) == "down" or string.lower(side) == "d" then
            turtleMove = turtle.down
            turtleDig = turtle.digDown
        end
    end

    if dist < 0 then
        print("moveAPI.lua - Warn: function 'forward()' recieved negative distance ")   
    end
    
    while dist > 0.499 do
            turtleMove()
        if digBool and turtle.detect() then
            turtleDig()
        elseif turtle.detect() then
            print("Mining disabled, movement stopped")
            return dist
            --return remaining distance.
        end
        dist = dist-1
    end
end

function look(side)
    side = conformSide(side)

    if side == "front" or side == "up" or side == "down" then
        return true
    elseif side == "left" then
        turtle.turnLeft()
        return "right"
    elseif side == "right" then
        turtle.turnRight()
        return "left"
    elseif side == "back" then
        turtle.turnRight()
        turtle.turnRight()
        return "back"
    end
end