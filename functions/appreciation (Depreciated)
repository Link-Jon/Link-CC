--Todo
--Avoid adding code here lool
--more code here, the more the  time wasted lol
--speaking of, cc.expect and lua's assert are basically the
--same as the error checkers i made.
--i dont know if i will give those up though...

--Random functions that are functionally useless,
--but i think someone might like for some reason :P


--Input Error (Handler).
--Replaced by errcheck.
function inErr(user,check)
    local str=type(user)
    if str==check then
        return true
    end
    --massive input err checker
    --could probably be simplified but would lose unique reactions.
    if str=="string" then
        printError("Expected "..check..", got string")
    elseif str=="nil" then
        printError("Expected "..check..", got nil")
    elseif str=="bool" then
        printError("Expected "..check..", got bool")
    elseif str=="number" then
        printError("Expected "..check..", got number")
    elseif str=="table" then
        printError("Expected "..check..", got table")
    elseif str=="function" then
        printError("Expected "..check..", got function")
    elseif str=="thread" then
        printError("Expected "..check..", got thread")
    elseif str=="userdata" then
        printError("How in the world have you done this? Var was of type userdata, which should be impossible in CraftOS")
        printError("Expected "..check..", got userdata??")
    else
        printError("Something broke with the 'inErr' function.")
        printError("Expected "..check..", got "..str)
    end
    return false
end


--LOLLL look at this code:

function errcheck(value, default, type, conform)
    --value = var to be checked
    
    
    if type(value) ~= type and default == nil then
        error("Expected "..type..", got "..value, 1)

end
--ignore the missing 'end' im trying to use the function type as a variable...
--bai bai type() checks XD


--[[
require("dwarfAPI")

turtleForward = turtle.forward
turtleTurnLeft = turtle.turnLeft
turtleTurnRight = turtle.turnRight
turtleUp = turtle.up
turtleDown = turtle.down

function turtleTurnAround()
    turtleTurnRight()
    turtleTurnRight()
end
--]]




checkForBounds old thingy
--[[
        if method == "totalLength" then
            local axis = settings.get("sys.storage.detection.axis")
            local currPos = getLocation(axis)
            local start = settings.get("sys.storage.detection.startPos")
            local length = settings.get("sys.storage.detection.totalLength")

            
            --print("axis: "..axis)
            --print("currPos: "..currPos)
            --print("start: "..start)
            --print("length: "..length)
            --sleep(2)

            --ahh..... how nice.
            --This doesnt work because the gps inside moveAPI doesnt work
            --Well atleast it makes sense. and will probably be easier to
            --fix... i hope. we will see later.
            

            if currPos == start and move =="back" or currPos == length and move == "forward" then
                --if trying to go out of bounds...
                --if not obvious, start must ALLWAYS be lower than length    
                return false
                
            elseif currPos < start or currPos > length then
                print("currPos: "..currPos.." || start: "..start.." || length: "..length)
                print("Warning. Out of bounds.")
                print("Currently turtle cannot fix itself, please help")
                error("Please place turtle back at the start location")
                return false
            else
                if turtle[move]() then
                    --i think?
                    step = step - 1
                else
                    --stop trying to move??
                    return false 
                end
            end]]